{"name":"unix-toolbox.js","tagline":"The power of Unix command line tools ported to Javascript","body":"### Introduction\r\nThe unix-toolbox.js is a port of many popular Unix command line tools to Javascript using Mozilla's [emscripten](http://emscripten.org/) project.\r\nIt runs completely on the client-side and requires WebWorker support in the client's browser.\r\n\r\n### Currently Supported Commands\r\n* [GnuPG](https://github.com/manuels/unix-toolbox.js-gnupg)\r\n  * `gpg` OpenPGP encryption and signing tool\r\n* [ImageMagick](https://github.com/manuels/unix-toolbox.js-imagemagick)\r\n  * `composite` overlaps one image over another.\r\n  * `conjure` interprets and executes scripts written in the Magick Scripting Language (MSL).\r\n  * `convert` convert between image formats as well as resize an image, blur, crop, despeckle, dither, draw on, flip, join, re-sample, and much more.\r\n  * `identify` describes the format and characteristics of one or more image files.\r\n  * `mogrify` resize  an  image, blur, crop, despeckle, dither, draw on, flip, join, re-sample, and much more. Mogrify overwrites the original image file, whereas,\r\n       convert(1) writes to a different image file.\r\n  * `montage` create  a  composite image by combining several separate images. The images are tiled on the composite image optionally adorned with a border, frame,\r\n       image name, and more.\r\n  * `stream` a lightweight tool to stream one or more pixel components of the image or portion of the image to your choice of storage formats.\r\n* [Poppler](https://github.com/manuels/unix-toolbox.js-poppler)\r\n  * `pdfdetach` Portable Document Format (PDF) document embedded file extractor\r\n  * `pdffonts` Portable Document Format (PDF) font analyzer\r\n  * `pdfimages` Portable Document Format (PDF) image extractor\r\n  * `pdfinfo` Portable Document Format (PDF) document information extractor\r\n  * `pdfseparate` Portable Document Format (PDF) page extractor\r\n  * `pdftohtml` program to convert PDF files into HTML, XML and PNG images\r\n  * `pdftoppm` Portable Document Format (PDF) to Portable Pixmap (PPM) converter\r\n  * `pdftops` Portable Document Format (PDF) to PostScript converter\r\n  * `pdftotext` Portable Document Format (PDF) to text converter\r\n* [File](https://github.com/manuels/unix-toolbox.js-file)\r\n  * `file` determine file type\r\n* [XZ Utils](https://github.com/manuels/unix-toolbox.js-xz)\r\n  * `xz` Compress or decompress .xz files\r\n  * `xzdec` Small .xz decompressor\r\n\r\n### Example\r\nThe Javascript class `Interface` can be used to initiate a WebWorker and communicate with it..\r\nThis is an example from ImageMagick's `convert` tool that loads some XML files required by ImageMagick and then loads the image `test.png`, rotates it and converts it to JPEG format:\r\n\r\n    <script src=\"toolbox-base/interface.js\"></script>\r\n    <script>\r\n      var convert = new Interface('convert-worker.js');\r\n\r\n      // print convert output to console\r\n      convert.on_stdout = function(txt) { console.log(txt); };\r\n      convert.on_stderr = function(txt) { console.log(txt); };\r\n\r\n      // load ImageMagick's configuration files\r\n      convert.mkdir('/', 'usr/local/etc/ImageMagick').then(function() {\r\n        convert.addUrl('./src/config/magic.xml',   '/usr/local/etc/ImageMagick', 'magic.xml');\r\n        convert.addUrl('./src/config/coder.xml',   '/usr/local/etc/ImageMagick', 'coder.xml');\r\n        convert.addUrl('./src/config/policy.xml',  '/usr/local/etc/ImageMagick', 'policy.xml');\r\n        convert.addUrl('./src/config/english.xml', '/usr/local/etc/ImageMagick', 'english.xml');\r\n        convert.addUrl('./src/config/locale.xml',  '/usr/local/etc/ImageMagick', 'locale.xml');\r\n        convert.addUrl('./src/config/delegates.xml',  '/usr/local/etc/ImageMagick', 'delegates.xml');\r\n\r\n        // load image to convert\r\n        convert.addUrl('demo/test.png', '/', 'test.png');\r\n\r\n        convert.allDone().then(function() {\r\n          convert.run('-rotate', '90', '/test.png', '/test-rotated-90.jpg').then(function() {\r\n            convert.getFile('/', 'test-rotated-90.jpg').then(function(contents) {\r\n\r\n              var img = document.createElement(\"img\");\r\n              img.src = \"data:image/jpeg;base64,\"+window.btoa(contents);\r\n\r\n              var body = document.getElementsByTagName(\"body\")[0];\r\n              body.appendChild(img);\r\n            });\r\n          });\r\n        });\r\n      });\r\n    </script>\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}